// Add coloring scheme
let currentTimeHour = currentTimeDate.getHours();

const deadlineHandler = {
    /* Logic and conditional handling for styling goes here */ 
    
    taskBorderStyle: function(target, border, deadline) {
        target.style.borderImageSource = `${border}`; // Pointer for styling later based on deadlines defined
        target.style.borderImageSlice = "1";
        target.style.borderStyle = "solid"; // Optional
    },

    differenceInSeconds: function(deadline, currentTimeDate) {
        let output = deadline - currentTimeDate;
        output = output/1000; /* From milliseconds */
        return output;
    },

    differenceInMinutes: function(deadline, currentTimeDate) {
        let output = deadline - currentTimeDate;
        output = output/60/1000; /* From milliseconds */
        return output;
    },

    differenceInHours: function(deadline, currentTimeDate) {
        let output = deadline - currentTimeDate;
        output = output/60/60/1000; /* From milliseconds */
        return output;
    },
    differenceInDays: function(deadline, currentTimeDate) {
        let output = deadline - currentTimeDate;
        output = output/24/60/60/1000; /* From milliseconds */
        return output;
    },
    
    timelimitApplied: function(target, deadline, checkbox, completedState) { // The color values and time parameters are automatically generated by co-pilot and such. It's a pretty braindead task to write this out manually.
        let deadlineDate = new Date(deadline);
        let defaultDeadline = new Date("1970-01-01T00:00:00");

        if(checkbox.checked == true) {
            if (completedState === 2) {
                this.taskBorderStyle(target, "linear-gradient(30deg, #32CD32, #7FFF00)", "dotted");
                console.log("Task completed before deadline. Applying limegreen-chartreuse with dotted border");
            } else if (completedState === 3) {
                this.taskBorderStyle(target, "linear-gradient(30deg, #32CD32, #228B22)", "dashed");
                console.log("Task completed after deadline. Applying limegreen-forestgreen with dashed border");
            }
            return;
        } else if(deadlineDate < currentTimeDate) {
            this.taskBorderStyle(target, "linear-gradient(30deg, #FF0000, #8B0000)", "solid");
            console.log("Task expired. Applying red-darkred");
            return;
        } else if (this.differenceInMinutes(deadlineDate, currentTimeDate) < 30) {
            this.taskBorderStyle(target, "linear-gradient(30deg, #FF0000, #8B0000)", "solid");
            console.log("Less than 30 minutes left. Applying red-darkred");
            return;
        } else if (this.differenceInHours(deadlineDate, currentTimeDate) < 1) {
            this.taskBorderStyle(target, "linear-gradient(30deg, #FF4500, #FF0000)", "solid");
            console.log("Less than 1 hour left. Applying orangered-red");
            return;
        } else if (this.differenceInHours(deadlineDate, currentTimeDate) < 3) {
            this.taskBorderStyle(target, "linear-gradient(30deg, #FF6347, #FF4500)", "solid");
            console.log("Less than 3 hours left. Applying tomato-orangered");
            return;
        } else if (this.differenceInHours(deadlineDate, currentTimeDate) < 6) {
            this.taskBorderStyle(target, "linear-gradient(30deg, #FF7F50, #FF6347)", "solid");
            console.log("Less than 6 hours left. Applying coral-tomato");
            return;
        } else if (this.differenceInHours(deadlineDate, currentTimeDate) < 12) {
            this.taskBorderStyle(target, "linear-gradient(30deg, #FFA07A, #FF7F50)", "solid");
            console.log("Less than 12 hours left. Applying lightsalmon-coral");
            return;
        } else if (this.differenceInHours(deadlineDate, currentTimeDate) < 24) {
            this.taskBorderStyle(target, "linear-gradient(30deg, #FF8C00, #FF4500)", "solid");
            console.log("Less than 1 day left. Applying darkorange-orangered");
            return;
        } else if (this.differenceInDays(deadlineDate, currentTimeDate) < 2) {
            this.taskBorderStyle(target, "linear-gradient(30deg, #FFD700, #FF8C00)", "solid");
            console.log("Less than 2 days left. Applying gold-darkorange");
            return;
        } else if (this.differenceInDays(deadlineDate, currentTimeDate) < 3) {
            this.taskBorderStyle(target, "linear-gradient(30deg, #FFFF00, #FFD700)", "solid");
            console.log("Less than 3 days left. Applying yellow-gold");
            return;
        } else if (this.differenceInDays(deadlineDate, currentTimeDate) < 5) {
            this.taskBorderStyle(target, "linear-gradient(30deg, #ADFF2F, #FFFF00)", "solid");
            console.log("Less than 5 days left. Applying greenyellow-yellow");
            return;
        } else if (this.differenceInDays(deadlineDate, currentTimeDate) < 7) {
            this.taskBorderStyle(target, "linear-gradient(30deg, #32CD32, #ADFF2F)", "solid");
            console.log("Less than 7 days left. Applying limegreen-greenyellow");
            return;
        } else if (this.differenceInDays(deadlineDate, currentTimeDate) < 14) {
            this.taskBorderStyle(target, "linear-gradient(30deg, #7FFF00, #32CD32)", "solid");
            console.log("Less than 14 days left. Applying chartreuse-limegreen");
            return;
        } else if (this.differenceInDays(deadlineDate, currentTimeDate) < 30) {
            this.taskBorderStyle(target, "linear-gradient(30deg, #00FF00, #7FFF00)", "solid");
            console.log("Less than 30 days left. Applying green-chartreuse");
            return;
        } else if(deadlineDate > defaultDeadline) {
            this.taskBorderStyle(target, "linear-gradient(30deg, #32CD32, #00FF00)", "solid");
            console.log("More than 30 days left. Applying limegreen-green");
            return;
        } else {
            this.taskBorderStyle(target, "linear-gradient(30deg, #D3D3D3, #A9A9A9)", "solid");
            console.log("No deadline set. Applying gray gradient");
            return;
        }
    }
}


